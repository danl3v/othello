;; Team Othello
;; tester.ss
;; October 4, 2010

(define othello-math-tester
  (list '((zero? 0) #t)
        '((zero? 1) #f)
        '((positive? 1) #t)
        '((positive? -1) #f)
        '((negative? -1) #t)
        '((negative? 1) #f)
        '((even? 2) #t)
        '((even? 1) #f)
        '((odd? 1) #t)
        '((odd? 1.5) "oops!")
        '((odd? 2) #f)
        '((div 17 3) 5)
        '((div 17 -3) -5)
        '((div -17 3) -6)
        '((div -17 -3) 6)
        '((mod 17 3) 2)
        '((mod 17 -3) 2)
        '((mod -17 3) 1)
        '((mod -17 -3) 1)
        '((truncate 5.7) 5.0)
        '((truncate -5.7) -5.0)
        '((floor 5.7) 5.0)
        '((floor -5.7) -6.0)
        '((ceiling 5.7) 6.0)
        '((ceiling -5.7) -5.0)
        '((round 5.7) 6.0)
        '((round -5.7) -6.0)
        '((round 5.5) 6.0)
        '((round 4.5) 4.0)
        '((abs 4) 4)
        '((abs -4) 4)
        '((max 2 9 -4) 9)
        '((min 2 9 -4) -4)
        '((gcd 3 6 -12) 3)
        '((lcm 3 6 -9) 18)
        '((expt -2 3) -8)
        '((expt -2 -3) -1/8)
        '((expt 0 0) 1)))
(define othello-list-tester
  (list '((caar '((1 2) (3 4) (5 6) (7 8))) 1)
        '((cadr '((1 2) (3 4) (5 6) (7 8))) (3 4))
        '((cadar '((1 2 3) (4 5 6) (7 8 9))) 2)
        '((cdddar '((1 2 3 4) (4 5 6) (7 8))) (4)) ;we also have all permutations up to 4 car/cdr
        '((list 1 2 3) (1 2 3))
        '((list) ())
        '((length '(1 2 3 4)) 4)
        '((length '()) 0)
        '((list-tail '(0 1 2 3 4) 3) (3 4))
        '((member 'a '(1 2 3 a b c)) (a b c))
        '((member 'z '(1 2 3 a b c)) #f)
        '((assq 2 '((0 a) (1 b) (2 c) (3 d))) (2 c))
        '((assq -3 '((0 a) (1 b) (2 c) (3 d))) #f)
        '((map (lambda (x) (* x x)) '(1 2 3)) (1 4 9))
        '((append '(a b) '(c d)) (a b c d))
        '((append '(a b) 'c) (a b . c))
        '((reverse '(1 2 3)) (3 2 1))
        '((list? (cons 1 2)) #f)
        '((list? (cons 1 '(2 3))) #t)
        '((list-ref '(1 2 3 4 5) 3) 4)
        '((cons* 1 2 3 '(4 5)) (1 2 3 4 5))
        '((cons* 3) 3)
        '((memp even? '(1 2 3)) (2 3))
        '((remq 2 '(1 2 3 2 4 5)) (1 3 4 5))
        '((remp even? '(1 2 3 4 5)) (1 3 5))
        '((filter even? '(1 2 3 4 5)) (2 4))
        '((find even? '(1 2 3 4 5)) 2)
        '((assp even? '((1 a) (2 b) (3 c))) (2 b))))
          

;; call to test math.ss
;;(equal? (map eval (map car othello-math-tester)) (map cadr othello-math-tester))

;; calls to test lists.ss
;;(equal? (map eval (map car othello-list-tester)) (map cadr othello-list-tester))
;;(map eval (map car othello-list-tester))
;;(map cadr othello-list-tester)