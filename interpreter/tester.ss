;; Team Othello
;; tester.ss
;; November 17, 2010

(define othello-math-tester
  (list (quote ((zero? 0) #t))
        (quote ((zero? 1) #f))
        (quote ((positive? 1) #t))
        (quote ((positive? -1) #f))
        (quote ((negative? -1) #t))
        (quote ((negative? 1) #f))
        (quote ((even? 2) #t))
        (quote ((even? 1) #f))
        (quote ((odd? 1) #t))
        (quote ((odd? 1.5) "oops!"))
        (quote ((odd? 2) #f))
        (quote ((div 17 3) 5))
        (quote ((div 17 -3) -5))
        (quote ((div -17 3) -6))
        (quote ((div -17 -3) 6))
        (quote ((mod 17 3) 2))
        (quote ((mod 17 -3) 2))
        (quote ((mod -17 3) 1))
        (quote ((mod -17 -3) 1))
        (quote ((truncate 5.7) 5.0))
        (quote ((truncate -5.7) -5.0))
        (quote ((floor 5.7) 5.0))
        (quote ((floor -5.7) -6.0))
        (quote ((ceiling 5.7) 6.0))
        (quote ((ceiling -5.7) -5.0))
        (quote ((round 5.7) 6.0))
        (quote ((round -5.7) -6.0))
        (quote ((round 5.5) 6.0))
        (quote ((round 4.5) 4.0))
        (quote ((abs 4) 4))
        (quote ((abs -4) 4))
        (quote ((max 2 9 -4) 9))
        (quote ((min 2 9 -4) -4))
        (quote ((gcd 3 6 -12) 3))
        (quote ((lcm 3 6 -9) 18))
        (quote ((expt -2 3) -8))
        (quote ((expt -2 -3) -1/8))
        (quote ((expt 0 0) 1))))
(define othello-list-tester
  (list (quote ((caar (quote ((1 2) (3 4) (5 6) (7 8)))) 1))
        (quote ((cadr (quote ((1 2) (3 4) (5 6) (7 8)))) (3 4)))
        (quote ((cadar (quote ((1 2 3) (4 5 6) (7 8 9)))) 2))
        (quote ((cdddar (quote ((1 2 3 4) (4 5 6) (7 8)))) (4))) ;we also have all permutations up to 4 car/cdr
        (quote ((list 1 2 3) (1 2 3)))
        (quote ((list) ()))
        (quote ((length (quote (1 2 3 4))) 4))
        (quote ((length (quote ())) 0))
        (quote ((list-tail (quote (0 1 2 3 4)) 3) (3 4)))
        (quote ((member (quote a) (quote (1 2 3 a b c))) (a b c)))
        (quote ((member (quote z) (quote (1 2 3 a b c))) #f))
        (quote ((assq 2 (quote ((0 a) (1 b) (2 c) (3 d)))) (2 c)))
        (quote ((assq -3 (quote ((0 a) (1 b) (2 c) (3 d)))) #f))
        (quote ((map (lambda (x) (* x x)) (quote (1 2 3))) (1 4 9)))
        (quote ((append (quote (a b)) (quote (c d))) (a b c d)))
        (quote ((append (quote (a b)) (quote c)) (a b . c)))
        (quote ((reverse (quote (1 2 3))) (3 2 1)))
        (quote ((list? (cons 1 2)) #f))
        (quote ((list? (cons 1 (quote (2 3)))) #t))
        (quote ((list-ref (quote (1 2 3 4 5)) 3) 4))
        (quote ((cons* 1 2 3 (quote (4 5))) (1 2 3 4 5)))
        (quote ((cons* 3) 3))
        (quote ((memp even? (quote (1 2 3))) (2 3)))
        (quote ((remq 2 (quote (1 2 3 2 4 5))) (1 3 4 5)))
        (quote ((remp even? (quote (1 2 3 4 5))) (1 3 5)))
        (quote ((filter even? (quote (1 2 3 4 5))) (2 4)))
        (quote ((find even? (quote (1 2 3 4 5))) 2))
        (quote ((assp even? (quote ((1 a) (2 b) (3 c)))) (2 b)))))